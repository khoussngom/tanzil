{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\nclass TranslateLoader {}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nlet TranslateFakeLoader = /*#__PURE__*/(() => {\n  class TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n      return of({});\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateFakeLoader_BaseFactory;\n      return function TranslateFakeLoader_Factory(__ngFactoryType__) {\n        return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(__ngFactoryType__ || TranslateFakeLoader);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateFakeLoader,\n      factory: TranslateFakeLoader.ɵfac\n    });\n  }\n  return TranslateFakeLoader;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass MissingTranslationHandler {}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nlet FakeMissingTranslationHandler = /*#__PURE__*/(() => {\n  class FakeMissingTranslationHandler {\n    handle(params) {\n      return params.key;\n    }\n    static ɵfac = function FakeMissingTranslationHandler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || FakeMissingTranslationHandler)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: FakeMissingTranslationHandler,\n      factory: FakeMissingTranslationHandler.ɵfac\n    });\n  }\n  return FakeMissingTranslationHandler;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1,\n    t2 = typeof o2,\n    length,\n    key,\n    keySet;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\nfunction mergeDeep(target, source) {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\nclass TranslateParser {}\nlet TranslateDefaultParser = /*#__PURE__*/(() => {\n  class TranslateDefaultParser extends TranslateParser {\n    templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    interpolate(expr, params) {\n      let result;\n      if (typeof expr === 'string') {\n        result = this.interpolateString(expr, params);\n      } else if (typeof expr === 'function') {\n        result = this.interpolateFunction(expr, params);\n      } else {\n        // this should not happen, but an unrelated TranslateService test depends on it\n        result = expr;\n      }\n      return result;\n    }\n    getValue(target, key) {\n      let keys = typeof key === 'string' ? key.split('.') : [key];\n      key = '';\n      do {\n        key += keys.shift();\n        if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n          target = target[key];\n          key = '';\n        } else if (!keys.length) {\n          target = undefined;\n        } else {\n          key += '.';\n        }\n      } while (keys.length);\n      return target;\n    }\n    interpolateFunction(fn, params) {\n      return fn(params);\n    }\n    interpolateString(expr, params) {\n      if (!params) {\n        return expr;\n      }\n      return expr.replace(this.templateMatcher, (substring, b) => {\n        let r = this.getValue(params, b);\n        return isDefined(r) ? r : substring;\n      });\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateDefaultParser_BaseFactory;\n      return function TranslateDefaultParser_Factory(__ngFactoryType__) {\n        return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(__ngFactoryType__ || TranslateDefaultParser);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateDefaultParser,\n      factory: TranslateDefaultParser.ɵfac\n    });\n  }\n  return TranslateDefaultParser;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass TranslateCompiler {}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nlet TranslateFakeCompiler = /*#__PURE__*/(() => {\n  class TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n      return value;\n    }\n    compileTranslations(translations, lang) {\n      return translations;\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateFakeCompiler_BaseFactory;\n      return function TranslateFakeCompiler_Factory(__ngFactoryType__) {\n        return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(__ngFactoryType__ || TranslateFakeCompiler);\n      };\n    })();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateFakeCompiler,\n      factory: TranslateFakeCompiler.ɵfac\n    });\n  }\n  return TranslateFakeCompiler;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  defaultLang;\n  /**\n   * The lang currently used\n   */\n  currentLang = this.defaultLang;\n  /**\n   * a list of translations per lang\n   */\n  translations = {};\n  /**\n   * an array of langs\n   */\n  langs = [];\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onTranslationChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onLangChange = new EventEmitter();\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  onDefaultLangChange = new EventEmitter();\n}\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nlet TranslateService = /*#__PURE__*/(() => {\n  class TranslateService {\n    store;\n    currentLoader;\n    compiler;\n    parser;\n    missingTranslationHandler;\n    useDefaultLang;\n    isolate;\n    extend;\n    loadingTranslations;\n    pending = false;\n    _onTranslationChange = new EventEmitter();\n    _onLangChange = new EventEmitter();\n    _onDefaultLangChange = new EventEmitter();\n    _defaultLang;\n    _currentLang;\n    _langs = [];\n    _translations = {};\n    _translationRequests = {};\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onTranslationChange() {\n      return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onLangChange() {\n      return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onDefaultLangChange() {\n      return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n      return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n      if (this.isolate) {\n        this._defaultLang = defaultLang;\n      } else {\n        this.store.defaultLang = defaultLang;\n      }\n    }\n    /**\n     * The lang currently used\n     */\n    get currentLang() {\n      return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n      if (this.isolate) {\n        this._currentLang = currentLang;\n      } else {\n        this.store.currentLang = currentLang;\n      }\n    }\n    /**\n     * an array of langs\n     */\n    get langs() {\n      return this.isolate ? this._langs : this.store.langs;\n    }\n    set langs(langs) {\n      if (this.isolate) {\n        this._langs = langs;\n      } else {\n        this.store.langs = langs;\n      }\n    }\n    /**\n     * a list of translations per lang\n     */\n    get translations() {\n      return this.isolate ? this._translations : this.store.translations;\n    }\n    set translations(translations) {\n      if (this.isolate) {\n        this._translations = translations;\n      } else {\n        this.store.translations = translations;\n      }\n    }\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param isolate whether this service should use the store or not\n     * @param extend To make a child module extend (and use) translations from parent modules.\n     * @param defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n      this.store = store;\n      this.currentLoader = currentLoader;\n      this.compiler = compiler;\n      this.parser = parser;\n      this.missingTranslationHandler = missingTranslationHandler;\n      this.useDefaultLang = useDefaultLang;\n      this.isolate = isolate;\n      this.extend = extend;\n      /** set the default language from configuration */\n      if (defaultLanguage) {\n        this.setDefaultLang(defaultLanguage);\n      }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang) {\n      if (lang === this.defaultLang) {\n        return;\n      }\n      let pending = this.retrieveTranslations(lang);\n      if (typeof pending !== \"undefined\") {\n        // on init set the defaultLang immediately\n        if (this.defaultLang == null) {\n          this.defaultLang = lang;\n        }\n        pending.pipe(take(1)).subscribe(res => {\n          this.changeDefaultLang(lang);\n        });\n      } else {\n        // we already have this language\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang() {\n      return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     */\n    use(lang) {\n      // don't change the language if the language given is already selected\n      if (lang === this.currentLang) {\n        return of(this.translations[lang]);\n      }\n      let pending = this.retrieveTranslations(lang);\n      if (typeof pending !== \"undefined\") {\n        // on init set the currentLang immediately\n        if (!this.currentLang) {\n          this.currentLang = lang;\n        }\n        pending.pipe(take(1)).subscribe(res => {\n          this.changeLang(lang);\n        });\n        return pending;\n      } else {\n        // we have this language, return an Observable\n        this.changeLang(lang);\n        return of(this.translations[lang]);\n      }\n    }\n    /**\n     * Retrieves the given translations\n     */\n    retrieveTranslations(lang) {\n      let pending;\n      // if this language is unavailable or extend is true, ask for it\n      if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n        this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n        pending = this._translationRequests[lang];\n      }\n      return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     */\n    getTranslation(lang) {\n      this.pending = true;\n      const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n      this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n      this.loadingTranslations.subscribe({\n        next: res => {\n          this.translations[lang] = this.extend && this.translations[lang] ? {\n            ...res,\n            ...this.translations[lang]\n          } : res;\n          this.updateLangs();\n          this.pending = false;\n        },\n        error: err => {\n          this.pending = false;\n        }\n      });\n      return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n      translations = this.compiler.compileTranslations(translations, lang);\n      if ((shouldMerge || this.extend) && this.translations[lang]) {\n        this.translations[lang] = mergeDeep(this.translations[lang], translations);\n      } else {\n        this.translations[lang] = translations;\n      }\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs() {\n      return this.langs;\n    }\n    /**\n     * Add available langs\n     */\n    addLangs(langs) {\n      langs.forEach(lang => {\n        if (this.langs.indexOf(lang) === -1) {\n          this.langs.push(lang);\n        }\n      });\n    }\n    /**\n     * Update the list of available langs\n     */\n    updateLangs() {\n      this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations, key, interpolateParams) {\n      let res;\n      if (key instanceof Array) {\n        let result = {},\n          observables = false;\n        for (let k of key) {\n          result[k] = this.getParsedResult(translations, k, interpolateParams);\n          if (isObservable(result[k])) {\n            observables = true;\n          }\n        }\n        if (observables) {\n          const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n          return forkJoin(sources).pipe(map(arr => {\n            let obj = {};\n            arr.forEach((value, index) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          }));\n        }\n        return result;\n      }\n      if (translations) {\n        res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n      }\n      if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n        res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n      }\n      if (typeof res === \"undefined\") {\n        let params = {\n          key,\n          translateService: this\n        };\n        if (typeof interpolateParams !== 'undefined') {\n          params.interpolateParams = interpolateParams;\n        }\n        res = this.missingTranslationHandler.handle(params);\n      }\n      return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n      // check if we are loading a new translation to use\n      if (this.pending) {\n        return this.loadingTranslations.pipe(concatMap(res => {\n          res = this.getParsedResult(res, key, interpolateParams);\n          return isObservable(res) ? res : of(res);\n        }));\n      } else {\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n      return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n        if (typeof res.subscribe === 'function') {\n          return res;\n        } else {\n          return of(res);\n        }\n      })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n      return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n        const res = this.getParsedResult(event.translations, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     */\n    instant(key, interpolateParams) {\n      if (!isDefined(key) || !key.length) {\n        throw new Error(`Parameter \"key\" required`);\n      }\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (isObservable(res)) {\n        if (key instanceof Array) {\n          let obj = {};\n          key.forEach((value, index) => {\n            obj[key[index]] = key[index];\n          });\n          return obj;\n        }\n        return key;\n      } else {\n        return res;\n      }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key, value, lang = this.currentLang) {\n      this.translations[lang][key] = this.compiler.compile(value, lang);\n      this.updateLangs();\n      this.onTranslationChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Changes the current lang\n     */\n    changeLang(lang) {\n      this.currentLang = lang;\n      this.onLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n      // if there is no default lang, use the one that we just set\n      if (this.defaultLang == null) {\n        this.changeDefaultLang(lang);\n      }\n    }\n    /**\n     * Changes the default lang\n     */\n    changeDefaultLang(lang) {\n      this.defaultLang = lang;\n      this.onDefaultLangChange.emit({\n        lang: lang,\n        translations: this.translations[lang]\n      });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang) {\n      this.resetLang(lang);\n      return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang) {\n      this._translationRequests[lang] = undefined;\n      this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      if (typeof browserLang === 'undefined') {\n        return undefined;\n      }\n      if (browserLang.indexOf('-') !== -1) {\n        browserLang = browserLang.split('-')[0];\n      }\n      if (browserLang.indexOf('_') !== -1) {\n        browserLang = browserLang.split('_')[0];\n      }\n      return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang() {\n      if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n        return undefined;\n      }\n      let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n      browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n      return browserCultureLang;\n    }\n    static ɵfac = function TranslateService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslateService)(i0.ɵɵinject(TranslateStore), i0.ɵɵinject(TranslateLoader), i0.ɵɵinject(TranslateCompiler), i0.ɵɵinject(TranslateParser), i0.ɵɵinject(MissingTranslationHandler), i0.ɵɵinject(USE_DEFAULT_LANG), i0.ɵɵinject(USE_STORE), i0.ɵɵinject(USE_EXTEND), i0.ɵɵinject(DEFAULT_LANGUAGE));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateService,\n      factory: TranslateService.ɵfac\n    });\n  }\n  return TranslateService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TranslateDirective = /*#__PURE__*/(() => {\n  class TranslateDirective {\n    translateService;\n    element;\n    _ref;\n    key;\n    lastParams;\n    currentParams;\n    onLangChangeSub;\n    onDefaultLangChangeSub;\n    onTranslationChangeSub;\n    set translate(key) {\n      if (key) {\n        this.key = key;\n        this.checkNodes();\n      }\n    }\n    set translateParams(params) {\n      if (!equals(this.currentParams, params)) {\n        this.currentParams = params;\n        this.checkNodes(true);\n      }\n    }\n    constructor(translateService, element, _ref) {\n      this.translateService = translateService;\n      this.element = element;\n      this._ref = _ref;\n      // subscribe to onTranslationChange event, in case the translations of the current lang change\n      if (!this.onTranslationChangeSub) {\n        this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n          if (event.lang === this.translateService.currentLang) {\n            this.checkNodes(true, event.translations);\n          }\n        });\n      }\n      // subscribe to onLangChange event, in case the language changes\n      if (!this.onLangChangeSub) {\n        this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n          this.checkNodes(true, event.translations);\n        });\n      }\n      // subscribe to onDefaultLangChange event, in case the default language changes\n      if (!this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n          this.checkNodes(true);\n        });\n      }\n    }\n    ngAfterViewChecked() {\n      this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n      let nodes = this.element.nativeElement.childNodes;\n      // if the element is empty\n      if (!nodes.length) {\n        // we add the key as content\n        this.setContent(this.element.nativeElement, this.key);\n        nodes = this.element.nativeElement.childNodes;\n      }\n      for (let i = 0; i < nodes.length; ++i) {\n        let node = nodes[i];\n        if (node.nodeType === 3) {\n          // node type 3 is a text node\n          let key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n          if (isDefined(node.lookupKey)) {\n            key = node.lookupKey;\n          } else if (this.key) {\n            key = this.key;\n          } else {\n            let content = this.getContent(node);\n            let trimmedContent = content.trim();\n            if (trimmedContent.length) {\n              node.lookupKey = trimmedContent;\n              // we want to use the content as a key, not the translation value\n              if (content !== node.currentValue) {\n                key = trimmedContent;\n                // the content was changed from the user, we'll use it as a reference if needed\n                node.originalContent = content || node.originalContent;\n              } else if (node.originalContent) {\n                // the content seems ok, but the lang has changed\n                // the current content is the translation, not the key, use the last real content as key\n                key = node.originalContent.trim();\n              } else if (content !== node.currentValue) {\n                // we want to use the content as a key, not the translation value\n                key = trimmedContent;\n                // the content was changed from the user, we'll use it as a reference if needed\n                node.originalContent = content || node.originalContent;\n              }\n            }\n          }\n          this.updateValue(key, node, translations);\n        }\n      }\n    }\n    updateValue(key, node, translations) {\n      if (key) {\n        if (node.lastKey === key && this.lastParams === this.currentParams) {\n          return;\n        }\n        this.lastParams = this.currentParams;\n        let onTranslation = res => {\n          if (res !== key) {\n            node.lastKey = key;\n          }\n          if (!node.originalContent) {\n            node.originalContent = this.getContent(node);\n          }\n          node.currentValue = isDefined(res) ? res : node.originalContent || key;\n          // we replace in the original content to preserve spaces that we might have trimmed\n          this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n          this._ref.markForCheck();\n        };\n        if (isDefined(translations)) {\n          let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n          if (isObservable(res)) {\n            res.subscribe({\n              next: onTranslation\n            });\n          } else {\n            onTranslation(res);\n          }\n        } else {\n          this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n        }\n      }\n    }\n    getContent(node) {\n      return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    setContent(node, content) {\n      if (isDefined(node.textContent)) {\n        node.textContent = content;\n      } else {\n        node.data = content;\n      }\n    }\n    ngOnDestroy() {\n      if (this.onLangChangeSub) {\n        this.onLangChangeSub.unsubscribe();\n      }\n      if (this.onDefaultLangChangeSub) {\n        this.onDefaultLangChangeSub.unsubscribe();\n      }\n      if (this.onTranslationChangeSub) {\n        this.onTranslationChangeSub.unsubscribe();\n      }\n    }\n    static ɵfac = function TranslateDirective_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslateDirective)(i0.ɵɵdirectiveInject(TranslateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TranslateDirective,\n      selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n      inputs: {\n        translate: \"translate\",\n        translateParams: \"translateParams\"\n      }\n    });\n  }\n  return TranslateDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TranslatePipe = /*#__PURE__*/(() => {\n  class TranslatePipe {\n    translate;\n    _ref;\n    value = '';\n    lastKey = null;\n    lastParams = [];\n    onTranslationChange;\n    onLangChange;\n    onDefaultLangChange;\n    constructor(translate, _ref) {\n      this.translate = translate;\n      this._ref = _ref;\n    }\n    updateValue(key, interpolateParams, translations) {\n      let onTranslation = res => {\n        this.value = res !== undefined ? res : key;\n        this.lastKey = key;\n        this._ref.markForCheck();\n      };\n      if (translations) {\n        let res = this.translate.getParsedResult(translations, key, interpolateParams);\n        if (isObservable(res.subscribe)) {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      }\n      this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    transform(query, ...args) {\n      if (!query || !query.length) {\n        return query;\n      }\n      // if we ask another time for the same key, return the last value\n      if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n        return this.value;\n      }\n      let interpolateParams = undefined;\n      if (isDefined(args[0]) && args.length) {\n        if (typeof args[0] === 'string' && args[0].length) {\n          // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n          // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n          let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n          try {\n            interpolateParams = JSON.parse(validArgs);\n          } catch (e) {\n            throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n          }\n        } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n          interpolateParams = args[0];\n        }\n      }\n      // store the query, in case it changes\n      this.lastKey = query;\n      // store the params, in case they change\n      this.lastParams = args;\n      // set the value\n      this.updateValue(query, interpolateParams);\n      // if there is a subscription to onLangChange, clean it\n      this._dispose();\n      // subscribe to onTranslationChange event, in case the translations change\n      if (!this.onTranslationChange) {\n        this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n          if (this.lastKey && event.lang === this.translate.currentLang) {\n            this.lastKey = null;\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      }\n      // subscribe to onLangChange event, in case the language changes\n      if (!this.onLangChange) {\n        this.onLangChange = this.translate.onLangChange.subscribe(event => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n            this.updateValue(query, interpolateParams, event.translations);\n          }\n        });\n      }\n      // subscribe to onDefaultLangChange event, in case the default language changes\n      if (!this.onDefaultLangChange) {\n        this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n          if (this.lastKey) {\n            this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n            this.updateValue(query, interpolateParams);\n          }\n        });\n      }\n      return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     */\n    _dispose() {\n      if (typeof this.onTranslationChange !== 'undefined') {\n        this.onTranslationChange.unsubscribe();\n        this.onTranslationChange = undefined;\n      }\n      if (typeof this.onLangChange !== 'undefined') {\n        this.onLangChange.unsubscribe();\n        this.onLangChange = undefined;\n      }\n      if (typeof this.onDefaultLangChange !== 'undefined') {\n        this.onDefaultLangChange.unsubscribe();\n        this.onDefaultLangChange = undefined;\n      }\n    }\n    ngOnDestroy() {\n      this._dispose();\n    }\n    static ɵfac = function TranslatePipe_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslatePipe)(i0.ɵɵdirectiveInject(TranslateService, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n    };\n    static ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n      name: \"translate\",\n      type: TranslatePipe,\n      pure: false\n    });\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslatePipe,\n      factory: TranslatePipe.ɵfac\n    });\n  }\n  return TranslatePipe;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TranslateModule = /*#__PURE__*/(() => {\n  class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, TranslateStore, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    static forChild(config = {}) {\n      return {\n        ngModule: TranslateModule,\n        providers: [config.loader || {\n          provide: TranslateLoader,\n          useClass: TranslateFakeLoader\n        }, config.compiler || {\n          provide: TranslateCompiler,\n          useClass: TranslateFakeCompiler\n        }, config.parser || {\n          provide: TranslateParser,\n          useClass: TranslateDefaultParser\n        }, config.missingTranslationHandler || {\n          provide: MissingTranslationHandler,\n          useClass: FakeMissingTranslationHandler\n        }, {\n          provide: USE_STORE,\n          useValue: config.isolate\n        }, {\n          provide: USE_DEFAULT_LANG,\n          useValue: config.useDefaultLang\n        }, {\n          provide: USE_EXTEND,\n          useValue: config.extend\n        }, {\n          provide: DEFAULT_LANGUAGE,\n          useValue: config.defaultLanguage\n        }, TranslateService]\n      };\n    }\n    static ɵfac = function TranslateModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TranslateModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: TranslateModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return TranslateModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵTranslateFakeLoader_BaseFactory","TranslateFakeLoader_Factory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","FakeMissingTranslationHandler_Factory","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","TranslateDefaultParser","templateMatcher","interpolate","expr","result","interpolateString","interpolateFunction","getValue","split","shift","undefined","fn","replace","substring","b","r","ɵTranslateDefaultParser_BaseFactory","TranslateDefaultParser_Factory","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","ɵTranslateFakeCompiler_BaseFactory","TranslateFakeCompiler_Factory","TranslateStore","defaultLang","currentLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","loadingTranslations","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_defaultLang","_currentLang","_langs","_translations","_translationRequests","constructor","defaultLanguage","setDefaultLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","observables","k","sources","arr","obj","index","translateService","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","TranslateService_Factory","ɵɵinject","TranslateDirective","element","_ref","lastParams","currentParams","onLangChangeSub","onDefaultLangChangeSub","onTranslationChangeSub","translate","checkNodes","translateParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","TranslateDirective_Factory","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","type","selectors","inputs","TranslatePipe","transform","query","args","validArgs","JSON","parse","e","SyntaxError","_dispose","TranslatePipe_Factory","ɵpipe","ɵɵdefinePipe","name","pure","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","TranslateModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector"],"sources":["/home/dialibatoul-marakhib/Programation/tanzil/frontend/node_modules/@ngx-translate/core/dist/fesm2022/ngx-translate-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n        return of({});\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeLoader });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\n            type: Injectable\n        }] });\n\nclass MissingTranslationHandler {\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    handle(params) {\n        return params.key;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FakeMissingTranslationHandler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\n            type: Injectable\n        }] });\n\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\nfunction mergeDeep(target, source) {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n\nclass TranslateParser {\n}\nclass TranslateDefaultParser extends TranslateParser {\n    templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    interpolate(expr, params) {\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr;\n        }\n        return result;\n    }\n    getValue(target, key) {\n        let keys = typeof key === 'string' ? key.split('.') : [key];\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (substring, b) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDefaultParser });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateCompiler {\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n        return value;\n    }\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeCompiler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    defaultLang;\n    /**\n     * The lang currently used\n     */\n    currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n    translations = {};\n    /**\n     * an array of langs\n     */\n    langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onDefaultLangChange = new EventEmitter();\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nclass TranslateService {\n    store;\n    currentLoader;\n    compiler;\n    parser;\n    missingTranslationHandler;\n    useDefaultLang;\n    isolate;\n    extend;\n    loadingTranslations;\n    pending = false;\n    _onTranslationChange = new EventEmitter();\n    _onLangChange = new EventEmitter();\n    _onDefaultLangChange = new EventEmitter();\n    _defaultLang;\n    _currentLang;\n    _langs = [];\n    _translations = {};\n    _translationRequests = {};\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param isolate whether this service should use the store or not\n     * @param extend To make a child module extend (and use) translations from parent modules.\n     * @param defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((res) => {\n                this.changeDefaultLang(lang);\n            });\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((res) => {\n                this.changeLang(lang);\n            });\n            return pending;\n        }\n        else { // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     */\n    retrieveTranslations(lang) {\n        let pending;\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\n                this.updateLangs();\n                this.pending = false;\n            },\n            error: (err) => {\n                this.pending = false;\n            }\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available langs\n     */\n    addLangs(langs) {\n        langs.forEach((lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n    /**\n     * Update the list of available langs\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        let res;\n        if (key instanceof Array) {\n            let result = {}, observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (isObservable(result[k])) {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n                return forkJoin(sources).pipe(map((arr) => {\n                    let obj = {};\n                    arr.forEach((value, index) => {\n                        obj[key[index]] = value;\n                    });\n                    return obj;\n                }));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((res) => {\n                res = this.getParsedResult(res, key, interpolateParams);\n                return isObservable(res) ? res : of(res);\n            }));\n        }\n        else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(res)) {\n            if (key instanceof Array) {\n                let obj = {};\n                key.forEach((value, index) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (typeof browserLang === 'undefined') {\n            return undefined;\n        }\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: USE_STORE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_DEFAULT_LANG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_STORE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_EXTEND]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DEFAULT_LANGUAGE]\n                }] }]; } });\n\nclass TranslateDirective {\n    translateService;\n    element;\n    _ref;\n    key;\n    lastParams;\n    currentParams;\n    onLangChangeSub;\n    onDefaultLangChangeSub;\n    onTranslationChangeSub;\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            let node = nodes[i];\n            if (node.nodeType === 3) { // node type 3 is a text node\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    let content = this.getContent(node);\n                    let trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                        else if (content !== node.currentValue) {\n                            // we want to use the content as a key, not the translation value\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            let onTranslation = (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe({ next: onTranslation });\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: TranslateDirective, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[translate],[ngx-translate]'\n                }]\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { translate: [{\n                type: Input\n            }], translateParams: [{\n                type: Input\n            }] } });\n\nclass TranslatePipe {\n    translate;\n    _ref;\n    value = '';\n    lastKey = null;\n    lastParams = [];\n    onTranslationChange;\n    onLangChange;\n    onDefaultLangChange;\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n    }\n    updateValue(key, interpolateParams, translations) {\n        let onTranslation = (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if (translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res.subscribe)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        let interpolateParams = undefined;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    ngOnDestroy() {\n        this._dispose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe, name: \"translate\", pure: false });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe, decorators: [{\n            type: Injectable\n        }, {\n            type: Pipe,\n            args: [{\n                    name: 'translate',\n                    pure: false // required to update the value when the promise is resolved\n                }]\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ChangeDetectorRef }]; } });\n\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule, declarations: [TranslatePipe,\n            TranslateDirective], exports: [TranslatePipe,\n            TranslateDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ],\n                    exports: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}